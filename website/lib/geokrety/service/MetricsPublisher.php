<?php

namespace Geokrety\Service\Scheduled;

use Prometheus\Storage\InMemory;
use Prometheus\CollectorRegistry;
use Prometheus\RenderTextFormat;
use Prometheus\PushGateway;
use GKDB;

/**
 * MetricsPublisher : collect and publish geokrety website metrics
 */
class MetricsPublisher {
    private $pushGatewayHostPort;
    private $job = "MetricsPublisher";
    private $namespace = "geokrety";
    private $scrapInterval;

    private $registry;

    public function __construct($scrapeInterval = null, $pushGatewayHostPort = 'pushgateway:9091') {
        $this->pushGatewayHostPort = $pushGatewayHostPort;
        $this->scrapeInterval = $scrapeInterval;
        $this->registry = null;
    }

    public function collect() {
        $this->registry = new CollectorRegistry(new InMemory());
        $this->collectHealth();
        if ($this->scrapeInterval == null) {
            return;
        }
        $this->collectErrory();
        $this->collectRuchy();
    }

    /**
      * prometheus behavior when no metrics => no graph == a hole when no metric are collected
      * todo: remove this metric
      */
    public function collectHealth() {
        //~ ## health metric
        $nowMillisec = gettimeofday()["sec"];
        $healthGauge = $this->registry->registerGauge($this->namespace, "healthGauge", "metric visual health check", []);
        $healthGauge->set($nowMillisec, []);
    }

    public function collectErrory() {
        //~ ## errory metric
        $name = "errory";
        $help = "website actions logged into errory table";
        $erroryGauge = $this->registry->registerGauge($this->namespace, $name, $help, ['source', 'action', 'severity']);

        $link = GKDB::getLink();
        $sql =<<<EOSQL
            SELECT COUNT(id) as sum, uid, severity
            FROM (
                        SELECT id, uid, severity
                        FROM `gk-errory`
                        WHERE timestamp >= NOW() - INTERVAL $this->scrapeInterval SECOND
                  UNION
                        SELECT DISTINCT NULL, uid, severity FROM `gk-errory`
             ) ee
            GROUP BY uid,severity
EOSQL;

        $result = mysqli_query($link, $sql);
        while ($row = mysqli_fetch_array($result)) {
            list($errorCount, $errorUid, $errorSeverity) = $row;
            $erroryGauge->set($errorCount, ['errory', $errorUid, $errorSeverity]);
        }
    }

    public function collectRuchy() {
        //~ ## ruchy metric
        $name = "ruchy";
        $help = "website trip entries from ruchy table";
        $ruchyGauge = $this->registry->registerGauge($this->namespace, $name, $help, ['country', 'logtype', 'app']);

        $link = GKDB::getLink();
        $sql =<<<EOSQL
            SELECT COUNT(id) as sum, country, logtype, app
            FROM (
                        SELECT id, country, logtype, app
                        FROM `gk-ruchy`
                        WHERE timestamp >= NOW() - INTERVAL $this->scrapeInterval SECOND
                  UNION
                        SELECT DISTINCT NULL, country, logtype, app FROM `gk-ruchy`
             ) ee
            GROUP BY country,logtype,app
EOSQL;

        $result = mysqli_query($link, $sql);
        while ($row = mysqli_fetch_array($result)) {
            list($ruchyCount, $ruchyCountry, $ruchyLogType, $ruchyLogApp) = $row;
            $ruchyGauge->set($ruchyCount, [$ruchyCountry, $this->convertLogType($ruchyLogType), $ruchyLogApp]);
        }
    }

    public function render() {
        $renderer = new RenderTextFormat();
        $result = "# generated by MetricsPublisher (scrapeInterval: $this->scrapeInterval)\n";
        $result .= $renderer->render($this->registry->getMetricFamilySamples());
        return $result;
    }

    public function collectAndRender() {
        $this->collect();
        return $this->render();
    }

    public function publish() {
        $pushGateway = new PushGateway($this->pushGatewayHostPort);
        $pushGateway->push($this->registry, $this->job, array());
    }

    private function convertLogType($dbLogType) {
        switch ($dbLogType) {
          case "0": return "drop";
          case "1": return "grab";
          case "2": return "comment";
          case "3": return "met";
          case "4": return "arch";
          case "5": return "dip";
        }
        return "unknown";
    }
}
